;;-----------------------------------------------------------------------
;;モンスターデータ作成用
(defstruct monster
  (health (randval (+ 10 *monster-level*)))
  (damage  0))

;;モンスターの攻撃
(defmethod monster-attack (m p))

;;---------------------中ボス-----------------------------------------------------------
(defstruct (ha2ne2 (:include monster)) (h-atk 8))

(defmethod monster-show ((m ha2ne2))
  (format nil "ボス：ハツネツエリア"))
(defmethod monster-attack ((m ha2ne2) (p player))
  (let ((x (+ 3 (randval (+ (player-level p) (ha2ne2-h-atk m))))))
    (case (random 3)
      (0
       (format t "「ハツネツの攻撃。~dのダメージをくらった。」~%" x)
       (decf (player-hp p) x)
       (list "hp" x))
      (1
       (let ((dame-str (- (player-str p) x)))
	 (if (= (player-str p) 0)
	     (progn (format t "「ネコPパンチ。HPが~d下がった。」~%" x)
		    (decf (player-hp p) x)
		    (list "hp" x))
	     (if (>= dame-str 0)
		 (progn (format t "「ネコPパンチ。力が~d下がった。」~%" x)
			(decf (player-str p) x)
			(list "str" x))
		 (progn (format t "「ネコPパンチ。力が~d下がった。」~%" (player-str p))
			(setf (player-str p) 0)
			(list "str" (player-str p)))))))
      (2
       (format t "「ハツネツが料理してご飯を食べている。ハツネツのHPが~d回復した！」~%" x)
       (incf (monster-health m) x)
       (list "heal" x)))))
;;--------ボス------------------------------------------------------------------------
(defstruct (boss (:include monster)) (boss-atk 10))

(defmethod monster-show ((m boss))
  (format nil "ボス：もげぞう"))
(defmethod monster-attack ((m boss) (p player))
  (let ((x (+ 5 (randval (+ (player-level p) (boss-boss-atk m))))))
    (case (random 5)
      ((0 3)
       (format t "「もげぞうの攻撃。~dのダメージをくらった。」~%" x)
       (decf (player-hp p) x)
       (list "hp" x))
      ((1 4)
       (let ((dame-agi (- (player-agi p) x)))
	 (if (= (player-agi p) 0)
	     (progn (format t "「もげぞうの攻撃。~dのダメージをくらった。」~%" x)
		    (decf (player-hp p) x)
		    (list "hp" x))
	     (if (>= dame-agi 0)
		 (progn (format t "「もげぞうの不思議な踊り。素早さが~d下がった。」~%" x)
			(decf (player-agi p) x)
			(list "agi" x))
		 (progn (format t "「もげぞうの不思議な踊り。素早さが~d下がった。」~%" (player-agi p))
			(setf (player-agi p) 0)
			(list "agi" (player-agi p)))))))
      (2
       (let ((dame-agi (- (player-agi p) x))
	     (dame-str (- (player-str p) x)))
	 (format t "「もげぞうのなんかすごい攻撃！すべてのステータスが~d下がった！」~%" x)
	 (decf (player-hp p) x)
	 (if (>= dame-agi 0)
	     (decf (player-agi p) x)
	     (setf (player-agi p) 0))
	 (if (>= dame-str 0)
	     (decf (player-str p) x)
	     (setf (player-str p) 0))
	 (list "all" x))))))
;;-------------------メタルヨテイチ--------------------------------------------------
(defstruct (yote1 (:include monster))
  (atk    (randval (+ 10 *monster-level*))))

(defmethod monster-show ((m yote1))
  (format nil "メタルヨテイチ"))

(defmethod monster-attack ((m yote1) (p player))
  (let ((atk (randval (yote1-atk m))))
    (case (random 2)
      (0
       (format t "「メタルヨテイチは何もしていない。」~%")
       (list "no"))
      (1 (format t "「メタルヨテイチが突然殴り掛かってきた。~dのダメージを受けた。」~%" atk)
       (decf (player-hp p) atk)
       (list "hp" atk)))))
;;-------------------オーク---------------------------------------------------------
(defstruct (orc (:include monster))
  (club-level (randval (+ 8 *monster-level*)))
  (name "オーク"))
(push #'make-orc *monster-builders*)

(defmethod monster-show ((m orc))
  (let ((x (orc-club-level m)))
    (cond
      ((>= 3 x 1) (format nil "か弱いオーク"))
      ((>= 6 x 4) (format nil "日焼けしたオーク"))
      ((>= 9 x 7) (format nil "邪悪なオーク"))
      (t (format nil "マッチョオーク")))))

(defmethod monster-attack ((m orc) (p player))
  (let ((x (randval (orc-club-level m))))
    (format t (monster-show m))
    (format t "が棍棒で殴ってきて ~d のダメージをくらった。~%" x)
    (decf (player-hp p) x)
    (list "hp" x)))
;;-------------------ヒドラ------------------------------
(defstruct (hydra (:include monster)))
(push #'make-hydra *monster-builders*)

(defmethod monster-show ((m hydra))
  (let ((x (monster-health m)))
    (cond
      ((>= 3 x 1)
       (format nil "意地悪なヒドラ"))
      ((>= 6 x 4)
       (format nil "腹黒いヒドラ"))
      ((>= 9 x 7)
       (format nil "強欲なヒドラ"))
      (t (format nil "グレートヒドラ")))))


(defmethod monster-attack ((m hydra) (p player))
  (let ((x (randval (ash (monster-health m) -1))))
    (format t (monster-show m))
    (format t "の攻撃 ~dのダメージを食らった。~%" x)
    (format t (monster-show m))
    (format t "の首が一本生えてきた！~%")
    (incf (monster-health m))
    (decf (player-hp p) x)
    (list "hp" x)))
;;-------------------スライム------------------------------
(defstruct (slime-mold (:include monster)) (sliminess (randval (+ 5 *monster-level*))))
(push #'make-slime-mold *monster-builders*)

(defmethod monster-show ((m slime-mold))
  (let ((x (slime-mold-sliminess m)))
    (cond
      ((<= 1 x 3) (format nil "ベタベタなスライム"))
      ((<= 4 x 6) (format nil "ベトベトなスライム"))
      ((<= 7 x 9) (format nil "ベチョベチョなスライム"))
      (t (format nil "ヌルヌルなスライム")))))

(defmethod monster-attack ((m slime-mold) (p player))
  (let ((x (randval (slime-mold-sliminess m))))
    (cond
      ((> (player-agi p) 0)
       (let ((dame-agi (- (player-agi p) x)))
	 (if (>= dame-agi 0)
	     (progn (format t (monster-show m))
		    (format t "は足に絡みついてきてあなたの素早さが ~d 下がった！~%" x)
		    (decf (player-agi p) x)
		    (list "agi" x))
	     (progn (format t (monster-show m))
		    (format t "は足に絡みついてきてあなたの素早さが ~d 下がった！~%"
				(player-agi p))
		    (setf (player-agi p) 0)
		    (list "agi" (player-agi p))))))
      (t (format t (monster-show m))
	 (format t "が何か液体を吐きかけてきて ~d ダメージくらった！~%" x)
	 (decf (player-hp p) x)
	 (list "hp" x)))))
;;-------------------ブリガンド------------------------------
(defstruct (brigand (:include monster)) (atk (+ 2 (random *monster-level*))))
(push #'make-brigand *monster-builders*)

(defmethod monster-show ((m brigand))
  (let ((x (brigand-atk m)))
    (cond
      ((<= 1 x 3) (format nil "毛の薄いブリガンド"))
      ((<= 4 x 6) (format nil "ひげもじゃなブリガンド"))
      ((<= 7 x 9) (format nil "胸毛の濃いブリガンド"))
      (t (format nil "禿げてるブリガンド")))))

(defmethod monster-attack ((m brigand) (p player))
  (let ((x (max (player-hp p) (player-agi p) (player-str p)))
	(damage (brigand-atk m)))
    (format t (monster-show m))
    (cond ((= x (player-hp p))
	   (format t "のスリングショットの攻撃で ~d ダメージくらった！~%" damage)
	   (decf (player-hp p) damage)
	   (list "hp" damage))
	  ((= x (player-agi p))
	   (format t "は鞭であなたの足を攻撃してきた！素早さが ~d 減った！~%" damage)
	   (decf (player-agi p) damage)
	   (list "agi" damage))
	  ((= x (player-str p))
	   (format t "は鞭であなたの腕を攻撃してきた！力が ~d 減った！~%" damage)
	   (decf (player-str p) damage)
	   (list "str" damage)))))
